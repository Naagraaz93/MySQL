========================================= MySQL & SQL ===========================================

1. What is SQL?

Before Databases
- People used Notepad, Excel, or Word to store data (called File Management System or FMS).
- This was hard to manage and easy to mess up.
===================================================================================================
DBMS – Database Management System
- Stores data in one or few tables.
- Used for small projects.
- Examples: MS Access, FoxPro, dBase.
====================================================================================================
RDBMS – Relational Database Management System
- Stores data in many related tables.
- Data is better organized and safer.
- Examples: MySQL, Oracle, SQL Server, PostgreSQL.
====================================================================================================
Big Data & NoSQL
- For very large data: use Hadoop or NoSQL (like MongoDB).
====================================================================================================
2. Basic Terms

Database
- A place to store data in a structured way.

SQL (Structured Query Language)
- Language used to Add, Change, Delete, or View data in databases.
====================================================================================================
3. How It Works: Client & Server

Server
- A powerful computer that stores the database.
- Needs more memory and power.

Client
- A tool to send SQL commands to the server.
- Needs less memory.

Types of Clients
1. GUI (Graphical User Interface): MySQL Workbench, SSMS, DBeaver, PgAdmin
  - - Output- Text, Graph, Chart format

2. CLI (Command Line Interface): MySQL CLI, psql
  -- Output- Text
=====================================================================================================
4. Types of SQL Commands

DDL – Data Definition Language --> Make or change tables: CREATE, ALTER, DROP, TRUNCATE, RENAME
DML – Data Manipulation Language--> Work with data: INSERT, UPDATE, DELETE
DQL – Data Query Language --> Get data: SELECT
TCL – Transaction Control Language--> Save or undo changes: COMMIT, ROLLBACK, SAVEPOINT
DCL – Data Control Language --> Give or remove access: GRANT, REVOKE
======================================================================================================
5. SQL Data Types

Numbers: TINYINT, SMALLINT, INT, BIGINT, FLOAT, DOUBLE

-Use TINYINT/SMALLINT for flags, status codes, or small counts.

-Use INT for general numeric IDs and values.

-Use BIGINT when values can exceed INT (e.g., high-frequency logging IDs).

-Use FLOAT when memory is tight and precision is not critical.

-Use DOUBLE when precision matters (e.g., scientific or financial apps).

=====================================================================================================

Text: CHAR(n), VARCHAR(n), TEXT, BLOB, Medium Text, Long Text, Medium Blob, long Blob 

-CHAR is fixed-length — if you store shorter strings, MySQL pads with spaces to the defined length.

-VARCHAR stores variable-length strings efficiently with a length prefix.

-TEXT and BLOB types are stored outside the table’s row storage if too large.

-TEXT types are for textual data, BLOB types are for binary data (e.g., images, encrypted content).

-Choosing the right type affects performance, storage, and functionality (e.g., indexes on TEXT columns have length limits).

=====================================================================================================
Dates: DATE (YYYY-MM-DD), DATETIME (YYYY-MM-DD HH:MM:SS), TIMESTAMP
DATE
-Stores only the date part (year, month, day).
-Example: '2025-05-21'

-DATETIME
-Stores both date and time parts.
-Example: '2025-05-21 15:30:45'
-It stores the literal date/time without timezone conversion.

-TIMESTAMP
-Also stores date and time, but it represents the number of seconds since Unix epoch (1970-01-01 00:00:00 UTC).
-When inserting, MySQL converts from your session’s time zone to UTC internally, and when retrieving, it converts back to your session’s time zone.
-Example: '2025-05-21 15:30:45'
-Useful for tracking events with timezone awareness (like last update time).
===========================================================================================================
6. Creating a Database and Table in MySQL

-- Create the database
CREATE DATABASE Schooldb;

-- Use the created database
USE Schooldb;

-- Create the students table
CREATE TABLE students (
    Student_ID INT,
    Name VARCHAR(50),
    Age INT,
    Grade CHAR(1)
);

-- Check the structure of the table
DESCRIBE students;
==============================================================

====================Inserting Data and SELECT Statement==========================

-- Insert records into the students table
INSERT INTO students (Student_ID, Name, Age, Grade) 
VALUES
    (1, 'Krishna', 30, 'A'),
    (2, 'Rahul', 22, 'B'),
    (3, 'Manish', 26, 'B'),
    (4, 'Nipun', 28, 'C'),
    (5, 'Shubham', 30, 'A');

-- Retrieve all records from the students table
SELECT * FROM students;

-- Retrieve only Name and Age columns
SELECT Name, Age FROM students;
=====================================================================================================

=============== Filtering Data with WHERE ===========================================================

-- Filtered queries using WHERE clause
-- Students younger than 30
SELECT * FROM students WHERE Age < 30;

-- Students whose Grade is 'A'
SELECT Name, Grade FROM students WHERE Grade = 'A';

-- Using Logical Operators
-- Age < 30 AND Grade = 'B'
SELECT Name, Grade FROM students WHERE Age < 30 AND Grade = 'B';

-- Age > 28 OR Grade = 'C'
SELECT Name, Grade FROM students WHERE Age > 28 OR Grade = 'C';

-- NOT operator: Students where Age is NOT greater than 25
SELECT * FROM students WHERE NOT Age > 25;
======================================================================================================

======================================Pattern Matching Operators=======================================
-- Pattern matching with LIKE operator

-- Names starting with 'K'
SELECT * FROM students WHERE Name LIKE 'K%';

-- Names ending with 'a'
SELECT * FROM students WHERE Name LIKE '%a';

-- Second letter is 'a'
SELECT * FROM students WHERE Name LIKE '_a%';

-- Names with exactly five characters
SELECT * FROM students WHERE Name LIKE '_____';
====================================================================================================

-- Not Like ---

-- Students name don't end with A --
select * from students where name not like "%a";

-- Students name don't start with K --
select * from students where name not like "K%";

-- Names where names with more than five characters--
select * from students where Name not like "_____"; 
=====================================================================================================

=================================== Group BY & Order BY ============================================

=================================== Group BY ========================================================
- GROUP BY is used to group rows that have the same values in specified columns. 
-It is often used with aggregate functions like COUNT(), SUM(), MAX(), MIN(), or AVG().

-- Group By -- Example:-

Create database Employee;
use Employee;
create table Sales(Employee_ID int primary key ,Employee_Name varchar(50),Product varchar (50),Quantity int,Sale_Date date);
INSERT INTO Sales (Employee_ID, Employee_Name, Product, Quantity, Sale_Date) VALUES
(1, 'Alice', 'Monitor', 6, '2023-04-11'),
(2, 'Charlie', 'Laptop', 3, '2023-12-12'),
(3, 'Bob', 'Monitor', 10, '2023-04-27'),
(4, 'Eve', 'Mouse', 3, '2023-09-01'),
(5, 'Eve', 'Laptop', 2, '2023-11-26'),
(6, 'Eve', 'Laptop', 10, '2023-08-05'),
(7, 'Charlie', 'Printer', 9, '2023-05-06'),
(8, 'Ian', 'Mouse', 10, '2023-12-06'),
(9, 'Ian', 'Mouse', 9, '2023-03-19'),
(10, 'Grace', 'Mouse', 3, '2023-12-24'),
(11, 'Frank', 'Printer', 10, '2023-08-21'),
(12, 'Charlie', 'Monitor', 10, '2023-08-03'),
(13, 'Jane', 'Mouse', 3, '2023-10-01'),
(14, 'Helen', 'Keyboard', 4, '2023-07-19'),
(15, 'Alice', 'Monitor', 10, '2023-08-13'),
(16, 'Jane', 'Laptop', 5, '2023-09-08'),
(17, 'Bob', 'Printer', 4, '2023-12-28'),
(18, 'Bob', 'Printer', 5, '2023-01-08'),
(19, 'Grace', 'Mouse', 9, '2023-07-30'),
(20, 'Jane', 'Keyboard', 4, '2023-05-01'),
(21, 'Eve', 'Printer', 6, '2023-06-24'),
(22, 'Frank', 'Laptop', 7, '2023-12-04'),
(23, 'Bob', 'Monitor', 4, '2023-03-16'),
(24, 'Eve', 'Monitor', 6, '2023-07-26'),
(25, 'Frank', 'Laptop', 10, '2023-02-07'),
(26, 'David', 'Monitor', 10, '2023-06-21'),
(27, 'Jane', 'Laptop', 8, '2023-03-06'),
(28, 'Grace', 'Printer', 6, '2023-02-24'),
(29, 'Jane', 'Keyboard', 2, '2023-02-19'),
(30, 'Grace', 'Printer', 10, '2023-07-01'),
(31, 'Frank', 'Mouse', 1, '2023-08-06'),
(32, 'David', 'Mouse', 4, '2023-03-04'),
(33, 'Eve', 'Monitor', 6, '2023-11-01'),
(34, 'Helen', 'Keyboard', 7, '2023-05-02'),
(35, 'Grace', 'Mouse', 10, '2023-09-29'),
(36, 'Charlie', 'Printer', 10, '2023-10-04'),
(37, 'Grace', 'Printer', 5, '2023-07-27'),
(38, 'Jane', 'Laptop', 7, '2023-06-13'),
(39, 'Alice', 'Keyboard', 4, '2023-03-07'),
(40, 'Frank', 'Printer', 2, '2023-04-19'),
(41, 'Eve', 'Keyboard', 6, '2023-04-03'),
(42, 'Helen', 'Keyboard', 6, '2023-06-20'),
(43, 'Frank', 'Laptop', 7, '2023-09-30'),
(44, 'Bob', 'Monitor', 10, '2023-08-26'),
(45, 'Alice', 'Printer', 5, '2023-01-12'),
(46, 'Frank', 'Keyboard', 3, '2023-10-11'),
(47, 'Charlie', 'Keyboard', 7, '2023-07-14'),
(48, 'Helen', 'Laptop', 4, '2023-05-10'),
(49, 'Grace', 'Mouse', 4, '2023-02-10'),
(50, 'Charlie', 'Keyboard', 3, '2023-10-02');

select * from Sales;

-- Group By Example --

-- Find total quantity sold by each employee --
select Employee_Name, sum(Quantity) as Total_Quantity from Sales group by Employee_Name;

-- Count of sales per product--
select Product, count(*) as Number_Of_Sales from Sales group by Product;

-- Avgrage quantity sold per product --
select Product, avg(Quantity) as Avg_Quantity from Sales group by Product;

-- Maxium Qunatity sold by each employee --
select Employee_Name, max(Quantity) as Max_Quantity from Sales group by Employee_Name;

-- Total quantity sold per day --
select Sale_Date, sum(Quantity) as Per_Day_Sale from Sales group by Sale_Date;
=====================================================================================================

=========================== Order BY ================================================================

-- Order by --

- ORDER BY is used to sort the result set in ascending (ASC) or descending (DESC) order based on one or more columns.


-- Order by Example ----

 -- List of all sales accending order of quantity --
 select * from Sales order by Quantity asc;

 -- List of all sales accending order of quantity --
 select * from Sales order by Quantity desc;
 
 -- List all the sales with the latest date first --
  
  
  -- List employee sales in alphabetical by employee name and the quantity in desc order --
  select Employee_Name,Product,Quantity from Sales order by Employee_Name asc,Quantity desc;

-- Top five highest quantity sales ---
select * from Sales order by Quantity desc limit 5; 
============================================================================================================

======================= Combine group by and order by ======================================================



SQL Functions.
JOINS.
Constraints.
Interview questions.